import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import type { Trader, TraderMaterial, MarketState } from '@/types/traders'

export const useTraderStore = defineStore('trader', () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
  const marketState = ref<MarketState>({
    currentDay: 1,
    activeTraders: [],
    traderHistory: [],
    marketTrends: {
      demandMultiplier: 1.0,
      priceFluctuation: 0.0,
      rareMaterialChance: 0.1
    }
  })

  // –ë–∞–∑–æ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—Ü—ã
  const baseTraders: Trader[] = [
    {
      id: 'textile_master',
      name: '–ú–∞—Å—Ç–µ—Ä –¢–∫–∞–Ω–µ–π',
      description: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ä–µ–¥–∫–∏—Ö —Ç–∫–∞–Ω—è—Ö –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö',
      icon: 'üßµ',
      rarity: 'common',
      arrivalTime: 1,
      departureTime: 3,
      reputation: 75,
      materials: []
    },
    {
      id: 'accessory_dealer',
      name: '–¢–æ—Ä–≥–æ–≤–µ—Ü –ê–∫—Å–µ—Å—Å—É–∞—Ä–∞–º–∏',
      description: '–ü—Ä–∏–≤–æ–∑–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—É–≥–æ–≤–∏—Ü—ã, –º–æ–ª–Ω–∏–∏ –∏ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É',
      icon: 'üíé',
      rarity: 'rare',
      arrivalTime: 2,
      departureTime: 5,
      reputation: 60,
      materials: []
    },
    {
      id: 'exotic_merchant',
      name: '–≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–π –ö—É–ø–µ—Ü',
      description: '–†–µ–¥–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –¥–∞–ª—ë–∫–∏—Ö —Å—Ç—Ä–∞–Ω',
      icon: 'üåç',
      rarity: 'epic',
      arrivalTime: 4,
      departureTime: 7,
      reputation: 90,
      materials: []
    },
    {
      id: 'legendary_craftsman',
      name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ú–∞—Å—Ç–µ—Ä',
      description: '–°–∞–º—ã–µ —Ä–µ–¥–∫–∏–µ –∏ —Ü–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
      icon: 'üëë',
      rarity: 'legendary',
      arrivalTime: 8,
      departureTime: 10,
      reputation: 100,
      materials: []
    }
  ]

  // –ë–∞–∑–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤
  const baseMaterials: TraderMaterial[] = [
    // –û–±—ã—á–Ω—ã–µ —Ç–∫–∞–Ω–∏
    {
      id: 'silk_fabric',
      name: '–®—ë–ª–∫–æ–≤–∞—è —Ç–∫–∞–Ω—å',
      description: '–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —à—ë–ª–∫ –¥–ª—è —ç–ª–∏—Ç–Ω–æ–π –æ–¥–µ–∂–¥—ã',
      icon: 'üï∏Ô∏è',
      category: 'fabric',
      rarity: 'common',
      basePrice: 500,
      quantity: 10,
      maxQuantity: 20,
      quality: 3,
      effects: [
        { type: 'quality_boost', value: 0.15, description: '+15% –∫ –∫–∞—á–µ—Å—Ç–≤—É' }
      ]
    },
    {
      id: 'cashmere_wool',
      name: '–ö–∞—à–µ–º–∏—Ä–æ–≤–∞—è —à–µ—Ä—Å—Ç—å',
      description: '–ú—è–≥–∫–∞—è –∏ —Ç—ë–ø–ª–∞—è —à–µ—Ä—Å—Ç—å –¥–ª—è –∑–∏–º–Ω–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏',
      icon: 'üêë',
      category: 'fabric',
      rarity: 'rare',
      basePrice: 800,
      quantity: 5,
      maxQuantity: 10,
      quality: 4,
      effects: [
        { type: 'quality_boost', value: 0.25, description: '+25% –∫ –∫–∞—á–µ—Å—Ç–≤—É' },
        { type: 'cost_reduction', value: 0.1, description: '-10% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞' }
      ]
    },
    // –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã
    {
      id: 'golden_buttons',
      name: '–ó–æ–ª–æ—Ç—ã–µ –ø—É–≥–æ–≤–∏—Ü—ã',
      description: '–†–æ—Å–∫–æ—à–Ω—ã–µ –ø—É–≥–æ–≤–∏—Ü—ã —Å –ø–æ–∑–æ–ª–æ—Ç–æ–π',
      icon: 'üîò',
      category: 'accessories',
      rarity: 'rare',
      basePrice: 200,
      quantity: 15,
      maxQuantity: 30,
      quality: 4,
      effects: [
        { type: 'quality_boost', value: 0.2, description: '+20% –∫ –∫–∞—á–µ—Å—Ç–≤—É' }
      ]
    },
    {
      id: 'diamond_zipper',
      name: '–ú–æ–ª–Ω–∏—è —Å –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞–º–∏',
      description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –º–æ–ª–Ω–∏—è —Å –∏–Ω–∫—Ä—É—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–∞–º–Ω—è–º–∏',
      icon: 'üíé',
      category: 'accessories',
      rarity: 'epic',
      basePrice: 1500,
      quantity: 3,
      maxQuantity: 5,
      quality: 5,
      effects: [
        { type: 'quality_boost', value: 0.4, description: '+40% –∫ –∫–∞—á–µ—Å—Ç–≤—É' },
        { type: 'special', value: 1, description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω' }
      ]
    },
    // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    {
      id: 'precision_scissors',
      name: '–¢–æ—á–Ω—ã–µ –Ω–æ–∂–Ω–∏—Ü—ã',
      description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–æ–∂–Ω–∏—Ü—ã –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–π —Ä–µ–∑–∫–∏',
      icon: '‚úÇÔ∏è',
      category: 'tools',
      rarity: 'common',
      basePrice: 300,
      quantity: 8,
      maxQuantity: 15,
      quality: 3,
      effects: [
        { type: 'production_speed', value: 0.2, description: '+20% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞' }
      ]
    },
    {
      id: 'magic_needle',
      name: '–í–æ–ª—à–µ–±–Ω–∞—è –∏–≥–ª–∞',
      description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∏–≥–ª–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ª–æ–º–∞–µ—Ç—Å—è',
      icon: 'ü™°',
      category: 'tools',
      rarity: 'legendary',
      basePrice: 5000,
      quantity: 1,
      maxQuantity: 1,
      quality: 5,
      effects: [
        { type: 'production_speed', value: 0.5, description: '+50% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞' },
        { type: 'quality_boost', value: 0.3, description: '+30% –∫ –∫–∞—á–µ—Å—Ç–≤—É' },
        { type: 'special', value: 1, description: '–í–µ—á–Ω–∞—è –∏–≥–ª–∞' }
      ]
    }
  ]

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  const activeTraders = computed(() => marketState.value.activeTraders)
  const currentDay = computed(() => marketState.value.currentDay)
  const marketTrends = computed(() => marketState.value.marketTrends)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
  function initializeTraders() {
    baseTraders.forEach(trader => {
      // –ù–∞–∑–Ω–∞—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–∞–∂–¥–æ–º—É —Ç–æ—Ä–≥–æ–≤—Ü—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
      const traderMaterials = getTraderMaterials(trader.id)
      trader.materials = traderMaterials.map(material => ({
        ...material,
        basePrice: Math.round(material.basePrice * (1 + marketState.value.marketTrends.priceFluctuation))
      }))
    })
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤—Ü–∞
  function getTraderMaterials(traderId: string): TraderMaterial[] {
    const materials: TraderMaterial[] = []
    
    switch (traderId) {
      case 'textile_master':
        materials.push(
          baseMaterials.find(m => m.id === 'silk_fabric')!,
          baseMaterials.find(m => m.id === 'cashmere_wool')!
        )
        break
      case 'accessory_dealer':
        materials.push(
          baseMaterials.find(m => m.id === 'golden_buttons')!,
          baseMaterials.find(m => m.id === 'diamond_zipper')!
        )
        break
      case 'exotic_merchant':
        materials.push(
          baseMaterials.find(m => m.id === 'diamond_zipper')!,
          baseMaterials.find(m => m.id === 'precision_scissors')!
        )
        break
      case 'legendary_craftsman':
        materials.push(
          baseMaterials.find(m => m.id === 'magic_needle')!
        )
        break
    }
    
    return materials
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤
  function updateActiveTraders() {
    const active: Trader[] = []
    
    baseTraders.forEach(trader => {
      if (marketState.value.currentDay >= trader.arrivalTime && 
          marketState.value.currentDay <= trader.departureTime) {
        active.push(trader)
      }
    })
    
    marketState.value.activeTraders = active
  }

  // –ü–æ–∫—É–ø–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —É —Ç–æ—Ä–≥–æ–≤—Ü–∞
  async function buyMaterial(traderId: string, materialId: string, quantity: number): Promise<boolean> {
    const trader = marketState.value.activeTraders.find(t => t.id === traderId)
    if (!trader) return false
    
    const material = trader.materials.find(m => m.id === materialId)
    if (!material || material.quantity < quantity) return false
    
    const totalPrice = material.basePrice * quantity
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º authStore –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏—è –¥–µ–Ω–µ–≥
    const { useAuthStore } = await import('@/stores/authStore')
    const authStore = useAuthStore()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    if (!authStore.user || authStore.user.money < totalPrice) {
      return false
    }
    
    const success = await authStore.spendMoney(totalPrice)
    if (!success) return false
    
    // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    material.quantity -= quantity
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–∫–ª–∞–¥–æ–≤–∞—è –∏–ª–∏ —Å–∫–ª–∞–¥)
    const { useWarehouseStore } = await import('@/stores/warehouseStore')
    const warehouseStore = useWarehouseStore()
    await warehouseStore.addMaterialToCorrectStorage(materialId, quantity)
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    const existingVisit = marketState.value.traderHistory.find(v => 
      v.traderId === traderId && v.day === marketState.value.currentDay
    )
    
    if (existingVisit) {
      existingVisit.materialsSold.push(materialId)
      existingVisit.totalSpent += totalPrice
    } else {
      marketState.value.traderHistory.push({
        traderId,
        day: marketState.value.currentDay,
        materialsSold: [materialId],
        totalSpent: totalPrice
      })
    }
    
    return true
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
  function nextDay() {
    marketState.value.currentDay++
    updateActiveTraders()
    updateMarketTrends()
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
  function updateMarketTrends() {
    // –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤
    marketState.value.marketTrends.demandMultiplier = 0.8 + Math.random() * 0.4 // 0.8-1.2
    marketState.value.marketTrends.priceFluctuation = -0.2 + Math.random() * 0.4 // -0.2 –¥–æ +0.2
    marketState.value.marketTrends.rareMaterialChance = 0.05 + Math.random() * 0.1 // 0.05-0.15
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–æ—Ä–∞
  initializeTraders()
  updateActiveTraders()

  return {
    marketState,
    activeTraders,
    currentDay,
    marketTrends,
    buyMaterial,
    nextDay,
    updateActiveTraders
  }
})
