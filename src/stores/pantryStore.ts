import { defineStore } from 'pinia'
import { ref, computed, watch } from 'vue'
import { useAuthStore } from '@/stores/authStore'

// –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ —Ç–∏–ø—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–ª–∞–¥–æ–≤–æ–π (–¥–æ–º –≥—É—Å—è)
export interface PantryMaterial {
  id: string // –ª–æ–∫–∞–ª—å–Ω—ã–π uuid –∏–ª–∏ material_id –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
  name: string
  icon?: string
  price?: number
  quantity: number
  quality?: number | null
  durability?: number | null
  comfort?: number | null
  style?: number | null
}

export interface PantryProduct {
  id: string
  name: string
  icon?: string
  price?: number
  quantity: number
  meta?: Record<string, unknown>
}

export const usePantryStore = defineStore('pantry', () => {
  const auth = useAuthStore()

  const STORAGE_KEY = computed(() => `home_pantry_${auth.user?.id || 'guest'}`)

  const materials = ref<PantryMaterial[]>([])
  const products = ref<PantryProduct[]>([])

  const materialsSlots = computed(() => 10) // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∫–ª–∞–¥–æ–≤–æ–π
  const productsSlots = computed(() => 10) // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∫–ª–∞–¥–æ–≤–æ–π

  const materialsUsedSlots = computed(() => materials.value.length)
  const productsUsedSlots = computed(() => products.value.length)

  const canAddMaterialSlot = computed(() => materialsUsedSlots.value < materialsSlots.value)
  const canAddProductSlot = computed(() => productsUsedSlots.value < productsSlots.value)

  function save() {
    try {
      localStorage.setItem(
        STORAGE_KEY.value,
        JSON.stringify({ materials: materials.value, products: products.value })
      )
    } catch {}
  }

  function load() {
    try {
      const raw = localStorage.getItem(STORAGE_KEY.value)
      if (raw) {
        const parsed = JSON.parse(raw)
        
        // –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
        const migratedMaterials = (parsed.materials || []).map((material: any) => ({
          ...material,
          durability: material.durability ?? null,
          comfort: material.comfort ?? null,
          style: material.style ?? null,
        }))
        
        materials.value = migratedMaterials
        products.value = parsed.products || []
        
        console.log('üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–ª–∞–¥–æ–≤–æ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', migratedMaterials.length)
        if (migratedMaterials.length > 0) {
          console.log('üìä –ü—Ä–∏–º–µ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', migratedMaterials[0])
        }
      }
    } catch {}
  }

  load()
  watch([materials, products], save, { deep: true })

  function generateId() {
    if (typeof crypto !== 'undefined' && (crypto as any).randomUUID) {
      return (crypto as any).randomUUID()
    }
    return Math.random().toString(36).slice(2)
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ id+quality, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç; –∏–Ω–∞—á–µ –Ω–æ–≤—ã–π —Å–ª–æ—Ç
  function addMaterial(payload: Omit<PantryMaterial, 'id'> & { id?: string }) {
    const id = payload.id || generateId()
    const same = materials.value.find(m => m.id === id || (m.name === payload.name && m.quality === payload.quality))
    if (same) {
      same.quantity += payload.quantity
      save()
      return true
    }
    if (!canAddMaterialSlot.value) return false
    materials.value.push({
      id,
      name: payload.name,
      icon: payload.icon,
      price: payload.price,
      quantity: payload.quantity,
      quality: payload.quality ?? null,
      durability: payload.durability ?? null,
      comfort: payload.comfort ?? null,
      style: payload.style ?? null,
    })
    save()
    return true
  }

  function removeMaterialByNameContains(substr: string, quantity: number): boolean {
    let need = quantity
    for (const m of materials.value) {
      if (m.name.toLowerCase().includes(substr.toLowerCase()) && need > 0) {
        const take = Math.min(m.quantity, need)
        m.quantity -= take
        need -= take
      }
    }
    materials.value = materials.value.filter(m => m.quantity > 0)
    save()
    return need === 0
  }

  function getQuantityByNameContains(substr: string): number {
    return materials.value
      .filter(m => m.name.toLowerCase().includes(substr.toLowerCase()))
      .reduce((s, m) => s + m.quantity, 0)
  }

  // –ü–µ—Ä–µ–Ω–æ—Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑ –∫–ª–∞–¥–æ–≤–æ–π –Ω–∞ —Å–∫–ª–∞–¥
  async function transferMaterialToWarehouse(materialId: string, quantity: number): Promise<boolean> {
    try {
      const material = materials.value.find(m => m.id === materialId)
      if (!material || material.quantity < quantity) {
        console.log('‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', { materialId, material, quantity })
        return false
      }

      console.log('üîÑ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª:', { 
        id: material.id, 
        name: material.name, 
        quantity,
        isUuid: material.id && material.id.length === 36 && material.id.includes('-')
      })

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º warehouseStore –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–∫–ª–∞–¥
      const { useWarehouseStore } = await import('@/stores/warehouseStore')
      const warehouseStore = useWarehouseStore()

      // –ï—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª —É–∂–µ –∏–º–µ–µ—Ç UUID (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
      if (material.id && material.id.length === 36 && material.id.includes('-')) {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º UUID –Ω–∞–ø—Ä—è–º—É—é:', material.id)
        // –≠—Ç–æ UUID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
        const success = await warehouseStore.addMaterialToWarehouse(material.id, quantity)
        
        if (success) {
          // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–ª–∞–¥–æ–≤–æ–π
          material.quantity -= quantity
          
          // –ï—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∫–ª–∞–¥–æ–≤–æ–π
          if (material.quantity <= 0) {
            const index = materials.value.findIndex(m => m.id === materialId)
            if (index !== -1) {
              materials.value.splice(index, 1)
            }
          }
          
          save()
          console.log(`üì¶ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ ${quantity} –µ–¥–∏–Ω–∏—Ü –º–∞—Ç–µ—Ä–∏–∞–ª–∞ "${material.name}" –Ω–∞ —Å–∫–ª–∞–¥`)
          return true
        }
        return false
      }

      // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ä—ã–π ID, –∏—â–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–∏
      console.log('üîç –ò—â–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–∏:', material.name)
      const { supabase } = await import('@/lib/supabase')
      
      const { data: materialInDb, error } = await supabase
        .from('warehouse_materials')
        .select('id')
        .eq('name', material.name)
        .single()

      if (error || !materialInDb) {
        console.error('‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', material.name, error)
        return false
      }

      console.log('‚úÖ –ù–∞–π–¥–µ–Ω –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', materialInDb.id)
      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ —Å–∫–ª–∞–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º UUID
      const success = await warehouseStore.addMaterialToWarehouse(materialInDb.id, quantity)
      
      if (success) {
        // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–ª–∞–¥–æ–≤–æ–π
        material.quantity -= quantity
        
        // –ï—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∫–ª–∞–¥–æ–≤–æ–π
        if (material.quantity <= 0) {
          const index = materials.value.findIndex(m => m.id === materialId)
          if (index !== -1) {
            materials.value.splice(index, 1)
          }
        }
        
        save()
        console.log(`üì¶ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ ${quantity} –µ–¥–∏–Ω–∏—Ü –º–∞—Ç–µ—Ä–∏–∞–ª–∞ "${material.name}" –Ω–∞ —Å–∫–ª–∞–¥`)
        return true
      }

      return false
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ —Å–∫–ª–∞–¥:', error)
      return false
    }
  }

  function addProduct(payload: Omit<PantryProduct, 'id'> & { id?: string }) {
    const id = payload.id || generateId()
    const same = products.value.find(p => p.name === payload.name)
    if (same) {
      same.quantity += payload.quantity
      save()
      return true
    }
    if (!canAddProductSlot.value) return false
    products.value.push({
      id,
      name: payload.name,
      icon: payload.icon,
      price: payload.price,
      quantity: payload.quantity,
      meta: payload.meta,
    })
    save()
    return true
  }

  return {
    // state
    materials,
    products,
    // capacity
    materialsSlots,
    productsSlots,
    materialsUsedSlots,
    productsUsedSlots,
    canAddMaterialSlot,
    canAddProductSlot,
    // actions
    addMaterial,
    addProduct,
    removeMaterialByNameContains,
    getQuantityByNameContains,
    transferMaterialToWarehouse,
    load,
    resetState() {
      materials.value = []
      products.value = []
      save()
    }
  }
})


