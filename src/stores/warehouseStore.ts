import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { supabase } from '@/lib/supabase'
import { useAuthStore } from './authStore'
import { useCompanyStore } from './companyStore'
import { usePantryStore } from './pantryStore'
import type { 
  WarehouseMaterial, 
  WarehouseClothing, 
  WarehouseStats, 
  WarehouseSummary,
  WarehouseTransaction,
  WarehouseUpdateRequest 
} from '@/types/warehouse'

export const useWarehouseStore = defineStore('warehouse', () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–ª–∞–¥–∞
  const materials = ref<WarehouseMaterial[]>([])
  const clothing = ref<WarehouseClothing[]>([])
  const stats = ref<WarehouseStats | null>(null)
  const transactions = ref<WarehouseTransaction[]>([])
  const loading = ref(false)
  const error = ref<string | null>(null)

  // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ auth store –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ–Ω—å–≥–∞–º–∏
  const authStore = useAuthStore()

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const materialsTotal = computed(() => {
    return materials.value.reduce((sum, material) => sum + material.quantity, 0)
  })

  const materialsValue = computed(() => {
    return materials.value.reduce((sum, material) => sum + (material.quantity * material.price), 0)
  })

  const clothingTotal = computed(() => {
    return clothing.value.reduce((sum, item) => sum + item.quantity, 0)
  })

  const clothingValue = computed(() => {
    return clothing.value.reduce((sum, item) => sum + (item.quantity * item.price), 0)
  })

  const totalValue = computed(() => {
    return materialsValue.value + clothingValue.value
  })

  const warehouseCapacity = computed(() => {
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ‚Äî —Å—á–∏—Ç–∞–µ–º –ø–æ —Å–ª–æ—Ç–∞–º –∏–∑ companyStore
    const companyStore = useCompanyStore()
    const slots = companyStore.state.capacities?.warehouse?.slots || companyStore.state.capacities?.homePantry?.materialsSlots || 0
    const used = materialsTotal.value + clothingTotal.value
    return slots > 0 ? Math.min(100, Math.round((used / slots) * 100)) : 0
  })

  const freeSpace = computed(() => {
    const companyStore = useCompanyStore()
    const slots = companyStore.state.capacities?.warehouse?.slots || companyStore.state.capacities?.homePantry?.materialsSlots || 0
    const used = materialsTotal.value + clothingTotal.value
    return Math.max(0, slots - used)
  })

  const summary = computed<WarehouseSummary>(() => ({
    materialsTotal: materialsTotal.value,
    materialsValue: materialsValue.value,
    clothingTotal: clothingTotal.value,
    clothingValue: clothingValue.value,
    totalValue: totalValue.value,
    capacityUsed: warehouseCapacity.value,
    freeSpace: freeSpace.value
  }))

  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
  const fetchMaterials = async () => {
    try {
      console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–∫–ª–∞–¥–∞...')
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ warehouse_materials –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
      const { data: allMaterialsData, error: allMaterialsError } = await supabase
        .from('warehouse_materials')
        .select('*')
        .order('name')

      if (allMaterialsError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', allMaterialsError)
        throw allMaterialsError
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
      if (authStore.user?.id) {
        console.log('üë§ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', authStore.user.id)
        
        const { data: inventoryData, error: inventoryError } = await supabase
          .from('user_warehouse_inventory')
          .select(`
            quantity,
            material_id,
            quality,
            durability,
            comfort,
            style,
            warehouse_materials (
              id,
              name,
              icon,
              price,
              description
            )
          `)
          .eq('user_id', authStore.user.id)

        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:', { inventoryData, inventoryError })

        if (inventoryError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:', inventoryError)
        } else if (inventoryData && inventoryData.length > 0) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ: –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
          const userMaterials = inventoryData.map((item: any) => ({
            id: item.warehouse_materials.id,
            name: item.warehouse_materials.name,
            icon: item.warehouse_materials.icon,
            quantity: item.quantity,
            price: item.warehouse_materials.price,
            quality: item.quality, // –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑ –ø–∞—Ä—Ç–∏–∏, –∞ –Ω–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
            durability: item.durability, // –°–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –ø–∞—Ä—Ç–∏–∏
            comfort: item.comfort,
            style: item.style,
            description: item.warehouse_materials.description,
            category: 'material'
          }))
          
          console.log('‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∑–∞–≥—Ä—É–∂–µ–Ω:', userMaterials)
          materials.value = userMaterials
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—É–ø–∫–∞—Ö
          if (!(window as any).__warehouseMaterialsCatalog) {
            (window as any).__warehouseMaterialsCatalog = allMaterialsData
          }
          return
        } else {
          console.log('üì¶ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç (length = 0)')
        }
      } else {
        console.log('‚ùå –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–∫–ª–∞–¥
      console.log('üì¶ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç –∏–ª–∏ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
      materials.value = []
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
      if (!(window as any).__warehouseMaterialsCatalog) {
        (window as any).__warehouseMaterialsCatalog = allMaterialsData || []
      }
    } catch (err) {
      console.error('‚ùå Error fetching materials:', err)
      throw err
    }
  }

  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–¥–µ–∂–¥–æ–π
  const fetchClothing = async () => {
    try {
      console.log('üëï –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–¥–µ–∂–¥—É —Å–∫–ª–∞–¥–∞...')
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –æ–¥–µ–∂–¥—ã –∏–≥—Ä–æ–∫–∞
      if (authStore.user?.id) {
        console.log('üë§ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –æ–¥–µ–∂–¥—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', authStore.user.id)
        
        const { data: inventoryData, error: inventoryError } = await supabase
          .from('user_clothing_inventory')
          .select(`
            quantity,
            clothing_id,
            quality,
            durability,
            comfort,
            style,
            warehouse_clothing (
              id,
              name,
              icon,
              price,
              description
            )
          `)
          .eq('user_id', authStore.user.id)

        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–¥–µ–∂–¥—ã:', { inventoryData, inventoryError })

        if (inventoryError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –æ–¥–µ–∂–¥—ã:', inventoryError)
        } else if (inventoryData && inventoryData.length > 0) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ: –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–µ–∂–¥–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
          const userClothing = inventoryData.map((item: any) => ({
            id: item.warehouse_clothing.id,
            name: item.warehouse_clothing.name,
            icon: item.warehouse_clothing.icon,
            quantity: item.quantity,
            price: item.warehouse_clothing.price,
            quality: item.quality,
            durability: item.durability,
            comfort: item.comfort,
            style: item.style,
            description: item.warehouse_clothing.description,
            category: 'clothing'
          }))
          
          console.log('‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', userClothing)
          clothing.value = userClothing
          return
        } else {
          console.log('üëï –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞ –ø—É—Å—Ç–∞ (length = 0)')
        }
      } else {
        console.log('‚ùå –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–∫–ª–∞–¥
      console.log('üëï –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
      clothing.value = []
    } catch (err) {
      console.error('‚ùå Error fetching clothing:', err)
      throw err
    }
  }

  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–∫–ª–∞–¥–∞
  const fetchStats = async () => {
    try {
      const { data, error: fetchError } = await supabase
        .from('warehouse_stats')
        .select('*')
        .single()

      if (fetchError) {
        throw fetchError
      }

      stats.value = data
    } catch (err) {
      console.error('Error fetching warehouse stats:', err)
      throw err
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const updateMaterialQuantity = async (materialId: string, quantityChange: number, reason?: string) => {
    try {
      loading.value = true
      error.value = null

      const material = materials.value.find(m => m.id === materialId)
      if (!material) {
        throw new Error('–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }

      const newQuantity = material.quantity + quantityChange
      if (newQuantity < 0) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ')
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error: updateError } = await supabase
        .from('user_warehouse_inventory')
        .update({ quantity: newQuantity })
        .eq('user_id', authStore.user?.id || '')
        .eq('material_id', materialId)

      if (updateError) {
        throw updateError
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ
      material.quantity = newQuantity
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è Vue
      materials.value = [...materials.value]
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await recordTransaction({
        itemType: 'material',
        itemId: materialId,
        quantityChange,
        reason
      })

    } catch (err) {
      error.value = '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞'
      console.error('Error updating material quantity:', err)
      throw err
    } finally {
      loading.value = false
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–µ–∂–¥—ã
  const updateClothingQuantity = async (clothingId: string, quantityChange: number, reason?: string) => {
    try {
      loading.value = true
      error.value = null

      const clothingItem = clothing.value.find(c => c.id === clothingId)
      if (!clothingItem) {
        throw new Error('–û–¥–µ–∂–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      }

      const newQuantity = clothingItem.quantity + quantityChange
      if (newQuantity < 0) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–µ–∂–¥—ã –Ω–∞ —Å–∫–ª–∞–¥–µ')
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { error: updateError } = await supabase
        .from('warehouse_clothing')
        .update({ quantity: newQuantity })
        .eq('id', clothingId)

      if (updateError) {
        throw updateError
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ
      clothingItem.quantity = newQuantity
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è Vue
      clothing.value = [...clothing.value]
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await recordTransaction({
        itemType: 'clothing',
        itemId: clothingId,
        quantityChange,
        reason
      })

    } catch (err) {
      error.value = '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–µ–∂–¥—ã'
      console.error('Error updating clothing quantity:', err)
      throw err
    } finally {
      loading.value = false
    }
  }

  // –ó–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const recordTransaction = async (update: WarehouseUpdateRequest) => {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –∏—Å–ø–æ–ª—å–∑—É—è crypto API
      const generateUUID = () => {
        if (typeof crypto !== 'undefined' && crypto.randomUUID) {
          return crypto.randomUUID()
        }
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
          const r = Math.random() * 16 | 0
          const v = c == 'x' ? r : (r & 0x3 | 0x8)
          return v.toString(16)
        })
      }

      const transaction: WarehouseTransaction = {
        id: generateUUID(),
        transaction_type: update.quantityChange > 0 ? 'in' : 'out',
        item_type: update.itemType,
        item_id: update.itemId, // –≠—Ç–æ —É–∂–µ UUID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        item_name: update.itemType === 'material' 
          ? materials.value.find(m => m.id === update.itemId)?.name || 'Unknown'
          : clothing.value.find(c => c.id === update.itemId)?.name || 'Unknown',
        quantity_change: update.quantityChange,
        price_per_unit: update.itemType === 'material'
          ? materials.value.find(m => m.id === update.itemId)?.price || 0
          : clothing.value.find(c => c.id === update.itemId)?.price || 0,
        total_value: Math.abs(update.quantityChange) * (update.itemType === 'material'
          ? materials.value.find(m => m.id === update.itemId)?.price || 0
          : clothing.value.find(c => c.id === update.itemId)?.price || 0),
        reason: update.reason,
        performed_by: 'current_user', // –ó–¥–µ—Å—å –±—É–¥–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        created_at: new Date().toISOString()
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { error: insertError } = await supabase
        .from('warehouse_transactions')
        .insert(transaction)

      if (insertError) {
        throw insertError
      }

      transactions.value.unshift(transaction)

    } catch (err) {
      console.error('Error recording transaction:', err)
    }
  }


  // –ü—Ä–æ–¥–∞–∂–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–∏–≥—Ä–æ–∫ –ø—Ä–æ–¥–∞–µ—Ç —Å–≤–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–æ —Å–∫–ª–∞–¥–∞)
  const sellMaterial = async (materialId: string, quantity: number) => {
    try {
      console.log(`üí∞ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–¥–∞–∂—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞ ${materialId}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity}`)
      
      const material = materials.value.find(m => m.id === materialId)
      if (!material) {
        throw new Error('–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }

      console.log(`üì¶ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: ${material.quantity}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏–≥—Ä–æ–∫–∞
      if (material.quantity < quantity) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ')
      }

      const totalValue = material.price * quantity * 0.8 // –ü—Ä–æ–¥–∞–µ–º –ø–æ 80% –æ—Ç —Ü–µ–Ω—ã
      console.log(`üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏: ${totalValue}‚ÇΩ`)
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫—É
      await authStore.addMoney(totalValue)

      // –ü—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –£–ú–ï–ù–¨–®–ê–ï–ú –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏–≥—Ä–æ–∫–∞ (—Ç–æ–≤–∞—Ä —É—Ö–æ–¥–∏—Ç)
      const newQuantity = material.quantity - quantity
      console.log(`üì¶ –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: ${newQuantity}`)

      const { error: updateError } = await supabase
        .from('user_warehouse_inventory')
        .update({ quantity: newQuantity })
        .eq('user_id', authStore.user?.id || '')
        .eq('material_id', materialId)

      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ:', updateError)
        throw updateError
      }

      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ - –∫–∞–∫ –≤ authStore
      const materialIndex = materials.value.findIndex(m => m.id === materialId)
      if (materialIndex !== -1) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
        const updatedMaterials = [...materials.value]
        updatedMaterials[materialIndex] = {
          ...updatedMaterials[materialIndex],
          quantity: newQuantity
        }
        // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é (–∫–∞–∫ user.value.money = newAmount)
        materials.value = updatedMaterials
        console.log(`‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${materials.value[materialIndex].quantity}`)
      }
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await recordTransaction({
        itemType: 'material',
        itemId: materialId,
        quantityChange: -quantity, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —Ç–æ–≤–∞—Ä —É—Ö–æ–¥–∏—Ç
        reason: `–ü—Ä–æ–¥–∞–∂–∞ –∏–≥—Ä–æ–∫–æ–º (${quantity} —à—Ç)`
      })
      
      console.log('‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
      return true
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', err)
      return false
    }
  }

  // –ü—Ä–æ–¥–∞–∂–∞ –æ–¥–µ–∂–¥—ã (–∏–≥—Ä–æ–∫ –ø—Ä–æ–¥–∞–µ—Ç —Å–≤–æ—é –æ–¥–µ–∂–¥—É —Å–æ —Å–∫–ª–∞–¥–∞)
  const sellClothing = async (clothingId: string, quantity: number) => {
    try {
      console.log(`üëó –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–¥–∞–∂—É –æ–¥–µ–∂–¥—ã ${clothingId}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity}`)
      
      const clothingItem = clothing.value.find(c => c.id === clothingId)
      if (!clothingItem) {
        throw new Error('–û–¥–µ–∂–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      }

      console.log(`üì¶ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–µ–∂–¥—ã: ${clothingItem.quantity}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–¥–µ–∂–¥—ã –Ω–∞ —Å–∫–ª–∞–¥–µ –∏–≥—Ä–æ–∫–∞
      if (clothingItem.quantity < quantity) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–µ–∂–¥—ã –Ω–∞ —Å–∫–ª–∞–¥–µ')
      }

      const totalValue = clothingItem.price * quantity * 0.8 // –ü—Ä–æ–¥–∞–µ–º –ø–æ 80% –æ—Ç —Ü–µ–Ω—ã
      console.log(`üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏: ${totalValue}‚ÇΩ`)
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫—É
      await authStore.addMoney(totalValue)

      // –ü—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –£–ú–ï–ù–¨–®–ê–ï–ú –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏–≥—Ä–æ–∫–∞ (—Ç–æ–≤–∞—Ä —É—Ö–æ–¥–∏—Ç)
      const newQuantity = clothingItem.quantity - quantity
      console.log(`üì¶ –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: ${newQuantity}`)

      const { error: updateError } = await supabase
        .from('warehouse_clothing')
        .update({ quantity: newQuantity })
        .eq('id', clothingId)

      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ:', updateError)
        throw updateError
      }

      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ - –∫–∞–∫ –≤ authStore
      const clothingIndex = clothing.value.findIndex(c => c.id === clothingId)
      if (clothingIndex !== -1) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
        const updatedClothing = [...clothing.value]
        updatedClothing[clothingIndex] = {
          ...updatedClothing[clothingIndex],
          quantity: newQuantity
        }
        // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é (–∫–∞–∫ user.value.money = newAmount)
        clothing.value = updatedClothing
        console.log(`‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${clothing.value[clothingIndex].quantity}`)
      }
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await recordTransaction({
        itemType: 'clothing',
        itemId: clothingId,
        quantityChange: -quantity, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —Ç–æ–≤–∞—Ä —É—Ö–æ–¥–∏—Ç
        reason: `–ü—Ä–æ–¥–∞–∂–∞ –∏–≥—Ä–æ–∫–æ–º (${quantity} —à—Ç)`
      })
      
      console.log('‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –æ–¥–µ–∂–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
      return true
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –æ–¥–µ–∂–¥—ã:', err)
      return false
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ —Å–∫–ª–∞–¥ –∏–≥—Ä–æ–∫–∞ (–ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ)
  const addMaterialToWarehouse = async (materialId: string, quantity: number) => {
    try {
      if (!authStore.user?.id) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
      }

      console.log(`üì¶ –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª ${materialId} –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity}`)

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ –∏–∑ –±–∞–∑—ã
      const { data: materialInfo } = await supabase
        .from('warehouse_materials')
        .select('*')
        .eq('id', materialId)
        .single()

      if (!materialInfo) {
        throw new Error('–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª —Å —Ç–∞–∫–∏–º –∂–µ –∫–∞—á–µ—Å—Ç–≤–æ–º –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º —Å–∫–ª–∞–¥–µ
      const { data: existingInventory } = await supabase
        .from('user_warehouse_inventory')
        .select('quantity')
        .eq('user_id', authStore.user.id)
        .eq('material_id', materialId)
        .eq('quality', materialInfo.quality)
        .single()

      const currentQuantity = existingInventory?.quantity || 0
      const newQuantity = currentQuantity + quantity

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º —Å–∫–ª–∞–¥–µ
      const { error: upsertError } = await supabase
        .from('user_warehouse_inventory')
        .upsert({
          user_id: authStore.user.id,
          material_id: materialId,
          quantity: newQuantity,
          quality: materialInfo.quality,
          durability: materialInfo.durability,
          comfort: materialInfo.comfort,
          style: materialInfo.style
        }, {
          onConflict: 'user_id,material_id,quality'
        })

      if (upsertError) {
        throw upsertError
      }

      console.log(`‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω: ${currentQuantity} + ${quantity} = ${newQuantity}`)

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const materialIndex = materials.value.findIndex(m => m.id === materialId)
      if (materialIndex !== -1) {
        const updatedMaterials = [...materials.value]
        updatedMaterials[materialIndex] = {
          ...updatedMaterials[materialIndex],
          quantity: newQuantity
        }
        materials.value = updatedMaterials
      } else {
        // –ï—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –µ—â–µ –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å—Ç–µ–π—Ç–µ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
        await fetchMaterials()
      }
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await recordTransaction({
        itemType: 'material',
        itemId: materialId,
        quantityChange: quantity,
        reason: `–ü–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ (${quantity} –º)`
      })

      return true
    } catch (err) {
      console.error('Error adding material to warehouse:', err)
      return false
    }
  }

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const addMaterialToCorrectStorage = async (materialId: string, quantity: number, materialData?: any) => {
    try {
      const companyStore = useCompanyStore()
      const pantryStore = usePantryStore()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω –ª–∏ —Å–∫–ª–∞–¥
      if (companyStore.isWarehouseAvailable) {
        // –ï—Å–ª–∏ —Å–∫–ª–∞–¥ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥
        console.log('üì¶ –°–∫–ª–∞–¥ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥')
        return await addMaterialToWarehouse(materialId, quantity)
      } else {
        // –ï—Å–ª–∏ —Å–∫–ª–∞–¥ –Ω–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–ª–∞–¥–æ–≤—É—é –¥–æ–º–∞
        console.log('üè† –°–∫–ª–∞–¥ –Ω–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –∫–ª–∞–¥–æ–≤—É—é –¥–æ–º–∞')
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ –∏–∑ –±–∞–∑—ã
        const { data: materialInfo } = await supabase
          .from('warehouse_materials')
          .select('*')
          .eq('id', materialId)
          .single()
        
        if (materialInfo) {
          console.log('üì¶ –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –∫–ª–∞–¥–æ–≤—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', {
            name: materialInfo.name,
            quality: materialInfo.quality,
            durability: materialInfo.durability,
            comfort: materialInfo.comfort,
            style: materialInfo.style
          })
          return pantryStore.addMaterial({
            id: materialId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º UUID –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
            name: materialInfo.name,
            icon: materialInfo.icon,
            price: materialInfo.price,
            quantity: quantity,
            quality: materialInfo.quality,
            durability: materialInfo.durability,
            comfort: materialInfo.comfort,
            style: materialInfo.style
          })
        } else if (materialData) {
          // –ï—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–æ–≤—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          console.log('üì¶ –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –∫–ª–∞–¥–æ–≤—É—é –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', {
            name: materialData.name,
            quality: materialData.quality,
            durability: materialData.durability,
            comfort: materialData.comfort,
            style: materialData.style
          })
          return pantryStore.addMaterial({
            id: materialId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º UUID –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
            name: materialData.name,
            icon: materialData.icon,
            price: materialData.price,
            quantity: quantity,
            quality: materialData.quality,
            durability: materialData.durability,
            comfort: materialData.comfort,
            style: materialData.style
          })
        } else {
          throw new Error('–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        }
      }
    } catch (err) {
      console.error('Error adding material to correct storage:', err)
      return false
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã –Ω–∞ —Å–∫–ª–∞–¥ –∏–≥—Ä–æ–∫–∞ (–ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ)
  const addClothingToWarehouse = async (clothingId: string, quantity: number) => {
    try {
      const clothingItem = clothing.value.find(c => c.id === clothingId)
      if (!clothingItem) {
        throw new Error('–û–¥–µ–∂–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏–≥—Ä–æ–∫–∞
      const newQuantity = clothingItem.quantity + quantity

      const { error: updateError } = await supabase
        .from('warehouse_clothing')
        .update({ quantity: newQuantity })
        .eq('id', clothingId)

      if (updateError) {
        throw updateError
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ - –∫–∞–∫ –≤ authStore
      const clothingIndex = clothing.value.findIndex(c => c.id === clothingId)
      if (clothingIndex !== -1) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
        const updatedClothing = [...clothing.value]
        updatedClothing[clothingIndex] = {
          ...updatedClothing[clothingIndex],
          quantity: newQuantity
        }
        // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é (–∫–∞–∫ user.value.money = newAmount)
        clothing.value = updatedClothing
      }
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await recordTransaction({
        itemType: 'clothing',
        itemId: clothingId,
        quantityChange: quantity, // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —Ç–æ–≤–∞—Ä –ø—Ä–∏—Ö–æ–¥–∏—Ç
        reason: `–ü–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ (${quantity} —à—Ç)`
      })

      return true
    } catch (err) {
      console.error('Error adding clothing to warehouse:', err)
      return false
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞
  const loadWarehouseData = async () => {
    console.log('üè≠ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–∞...')
    console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º loading = true')
    loading.value = true
    error.value = null
    
    try {
      await Promise.all([
        fetchMaterials(),
        fetchClothing(),
        fetchStats()
      ])
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ')
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞:', err)
      error.value = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞'
    } finally {
      console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º loading = false')
      loading.value = false
      console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ loading —Å–±—Ä–æ—à–µ–Ω–æ')
    }
  }

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∫–ª–∞–¥–∞
  const resetWarehouse = () => {
    materials.value = []
    clothing.value = []
    stats.value = null
    transactions.value = []
    error.value = null
  }

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    materials,
    clothing,
    stats,
    transactions,
    loading,
    error,
    
    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    materialsTotal,
    materialsValue,
    clothingTotal,
    clothingValue,
    totalValue,
    warehouseCapacity,
    freeSpace,
    summary,
    
    // –î–µ–π—Å—Ç–≤–∏—è
    fetchMaterials,
    fetchClothing,
    fetchStats,
    updateMaterialQuantity,
    updateClothingQuantity,
    recordTransaction,
    sellMaterial,
    sellClothing,
    addMaterialToWarehouse,
    addClothingToWarehouse,
    addMaterialToCorrectStorage,
    loadWarehouseData,
    resetWarehouse
  }
})
