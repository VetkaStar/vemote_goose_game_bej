import { ref } from 'vue'

export interface MusicTrack {
  id: string
  name: string
  path: string
  duration: number
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –º—É–∑—ã–∫–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
let globalAudio: Audio | null = null
let globalIsPlaying = false
let globalCurrentTrack: MusicTrack | null = null

export function useMusic() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
  const isPlaying = ref(false)
  const currentTrackIndex = ref(0)
  const currentTrack = ref<MusicTrack | null>(null)
  const volume = ref(0.36) // 0.0 - 1.0 (36% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  const musicVolume = ref(0.6) // 0.0 - 1.0 (60% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  const environmentVolume = ref(0.4) // 0.0 - 1.0 (40% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  const isWaitingForInteraction = ref(true) // –û–∂–∏–¥–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const hasUserInteracted = ref(false) // –§–ª–∞–≥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const isInitialized = ref(false) // –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  
  // –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
  const tracks = ref<MusicTrack[]>([
    {
      id: 'track1',
      name: '–§–æ–Ω–æ–≤–∞—è –º–µ–ª–æ–¥–∏—è 1',
      path: '/music/1 (1).mp3',
      duration: 0
    },
    {
      id: 'track2', 
      name: '–§–æ–Ω–æ–≤–∞—è –º–µ–ª–æ–¥–∏—è 2',
      path: '/music/1 (2).mp3',
      duration: 0
    },
    {
      id: 'track3',
      name: '–§–æ–Ω–æ–≤–∞—è –º–µ–ª–æ–¥–∏—è 3', 
      path: '/music/1 (3).mp3',
      duration: 0
    }
  ])

  // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç
  if (!globalAudio) {
    globalAudio = new Audio()
    console.log('üéµ –°–æ–∑–¥–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç')
  }
  const audio = globalAudio
  let fadeTimeout: NodeJS.Timeout | null = null
  let fadeInterval: NodeJS.Timeout | null = null

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º
  isPlaying.value = globalIsPlaying
  currentTrack.value = globalCurrentTrack

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  audio.preload = 'auto'
  audio.loop = false
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
  audio.addEventListener('ended', () => {
    console.log('üéµ –¢—Ä–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É')
    nextTrack()
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
  audio.addEventListener('loadedmetadata', () => {
    if (currentTrack.value) {
      currentTrack.value.duration = audio.duration
      console.log(`üéµ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞: ${currentTrack.value.name}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${audio.duration}—Å`)
    }
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  audio.addEventListener('error', (e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É–¥–∏–æ:', e)
    console.error('‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏:', audio.error?.code)
    console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', audio.error?.message)
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—É–∑—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  audio.addEventListener('pause', () => {
    console.log('‚è∏Ô∏è –ê—É–¥–∏–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  audio.addEventListener('play', () => {
    console.log('‚ñ∂Ô∏è –ê—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è')
    console.log('üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å –∞—É–¥–∏–æ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏:', audio.volume)
  })

  // –§—É–Ω–∫—Ü–∏—è –∑–∞—Ç—É—Ö–∞–Ω–∏—è
  const fadeOut = (duration: number = 2000): Promise<void> => {
    return new Promise((resolve) => {
      const startVolume = audio.volume
      const steps = 20
      const stepDuration = duration / steps
      const volumeStep = startVolume / steps
      
      let currentStep = 0
      
      fadeInterval = setInterval(() => {
        currentStep++
        audio.volume = Math.max(0, startVolume - (volumeStep * currentStep))
        
        if (currentStep >= steps || audio.volume <= 0) {
          audio.volume = 0
          clearInterval(fadeInterval!)
          fadeInterval = null
          resolve()
        }
      }, stepDuration)
    })
  }

  // –§—É–Ω–∫—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–∞
  const fadeIn = (duration: number = 3000): Promise<void> => {
    return new Promise((resolve) => {
      const targetVolume = volume.value * musicVolume.value
      const steps = 30 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
      const stepDuration = duration / steps
      
      console.log(`üéµ FadeIn: –¶–µ–ª–µ–≤–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å ${Math.round(targetVolume * 100)}%`)
      
      // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∏–ª–∏ –æ—á–µ–Ω—å —Ç–∏—Ö–æ–π
      const startVolume = Math.min(0.01, targetVolume)
      audio.volume = startVolume
      let currentStep = 0
      
      fadeInterval = setInterval(() => {
        currentStep++
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∫—Ä–∏–≤—É—é –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ fade-in
        const progress = currentStep / steps
        const easedProgress = 1 - Math.pow(1 - progress, 3) // easeOutCubic
        audio.volume = startVolume + (targetVolume - startVolume) * easedProgress
        
        if (currentStep >= steps || audio.volume >= targetVolume) {
          audio.volume = targetVolume
          clearInterval(fadeInterval!)
          fadeInterval = null
          console.log(`üéµ FadeIn –∑–∞–≤–µ—Ä—à—ë–Ω: ${Math.round(audio.volume * 100)}%`)
          resolve()
        }
      }, stepDuration)
    })
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
  const loadTrack = async (trackIndex: number): Promise<void> => {
    if (trackIndex < 0 || trackIndex >= tracks.value.length) {
      console.error('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫–∞:', trackIndex)
      return
    }

    const track = tracks.value[trackIndex]
    currentTrackIndex.value = trackIndex
    currentTrack.value = track
    globalCurrentTrack = track

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
      console.log('üéµ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫:', track.name)
      console.log('üéµ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ:', {
        paused: audio.paused,
        ended: audio.ended,
        readyState: audio.readyState,
        error: audio.error
      })

      audio.src = track.path
      await audio.load()
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      const finalVolume = volume.value * musicVolume.value
      audio.volume = finalVolume
      console.log(`üéµ –ì—Ä–æ–º–∫–æ—Å—Ç—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞: ${Math.round(finalVolume * 100)}%`)
      
      console.log('‚úÖ –¢—Ä–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω:', track.name)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞:', error)
    }
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É
  const nextTrack = async (): Promise<void> => {
    if (!isPlaying.value) return

    console.log('üéµ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É...')
    
    // –ó–∞—Ç—É—Ö–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
    await fadeOut(2000)
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É
    const nextIndex = (currentTrackIndex.value + 1) % tracks.value.length
    await loadTrack(nextIndex)
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
    const finalVolume = volume.value * musicVolume.value
    audio.volume = finalVolume
    console.log(`üéµ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞: ${Math.round(finalVolume * 100)}%`)
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –±–µ–∑ fade-in (—á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å)
    if (isPlaying.value) {
      await audio.play()
      console.log('‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –∑–∞–ø—É—â–µ–Ω')
    }
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ç—Ä–µ–∫—É
  const previousTrack = async (): Promise<void> => {
    if (!isPlaying.value) return

    console.log('üéµ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ç—Ä–µ–∫—É...')
    
    await fadeOut(2000)
    
    const prevIndex = currentTrackIndex.value === 0 
      ? tracks.value.length - 1 
      : currentTrackIndex.value - 1
    
    await loadTrack(prevIndex)
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
    const finalVolume = volume.value * musicVolume.value
    audio.volume = finalVolume
    console.log(`üéµ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞: ${Math.round(finalVolume * 100)}%`)
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –±–µ–∑ fade-in (—á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å)
    if (isPlaying.value) {
      await audio.play()
      console.log('‚ñ∂Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫ –∑–∞–ø—É—â–µ–Ω')
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  const checkAndRestorePlayback = async (): Promise<void> => {
    if (isPlaying.value && (audio.paused || audio.ended)) {
      console.log('üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...')
      try {
        await audio.play()
        console.log('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
      } catch (error) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ:', error)
      }
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ localStorage
  const loadSettings = (): void => {
    try {
      const savedSettings = localStorage.getItem('fashion_goose_settings')
      if (savedSettings) {
        const settings = JSON.parse(savedSettings)
        console.log('üéµ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage:', settings)
        
        if (settings.masterVolume !== undefined && settings.masterVolume !== null) {
          volume.value = settings.masterVolume / 100
          console.log('üîä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –æ–±—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å:', settings.masterVolume + '%')
        }
        if (settings.musicVolume !== undefined && settings.musicVolume !== null) {
          musicVolume.value = settings.musicVolume / 100
          console.log('üéµ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –≥—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏:', settings.musicVolume + '%')
        }
        if (settings.ambientVolume !== undefined && settings.ambientVolume !== null) {
          environmentVolume.value = settings.ambientVolume / 100
          console.log('üåç –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –≥—Ä–æ–º–∫–æ—Å—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏—è:', settings.ambientVolume + '%')
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        const finalVolume = volume.value * musicVolume.value
        audio.volume = finalVolume
        
        console.log('üéµ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', {
          master: Math.round(volume.value * 100) + '%',
          music: Math.round(musicVolume.value * 100) + '%',
          ambient: Math.round(environmentVolume.value * 100) + '%',
          final: Math.round(finalVolume * 100) + '%'
        })
      } else {
        console.log('üéµ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä–æ–º–∫–æ—Å—Ç–∏:', error)
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–∑—ã–∫–∏ –ø–æ—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const initializeAfterInteraction = async (): Promise<void> => {
    if (hasUserInteracted.value) {
      console.log('üëÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º')
      return
    }
    
    hasUserInteracted.value = true
    isWaitingForInteraction.value = false
    console.log('üëÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, –∑–∞–ø—É—Å–∫–∞–µ–º –º—É–∑—ã–∫—É')
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    loadSettings()
    
    await play()
  }

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  const play = async (): Promise<void> => {
    if (isPlaying.value || isInitialized.value) {
      console.log('üéµ –ú—É–∑—ã–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')
      return
    }

    isInitialized.value = true
    isPlaying.value = true
    globalIsPlaying = true
    
    if (!currentTrack.value) {
      await loadTrack(0)
    }
    
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
      const finalVolume = volume.value * musicVolume.value
      audio.volume = finalVolume
      console.log(`üéµ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º: ${Math.round(finalVolume * 100)}%`)
      
      await audio.play()
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—É–∑—ã–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç
      setTimeout(() => {
        if (audio.paused) {
          console.log('‚ö†Ô∏è –ê—É–¥–∏–æ –Ω–∞ –ø–∞—É–∑–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞...')
          audio.play().catch(err => console.error('‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err))
        }
        console.log(`üéµ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: paused=${audio.paused}, volume=${Math.round(audio.volume * 100)}%`)
      }, 200)
      
      console.log('‚ñ∂Ô∏è –ú—É–∑—ã–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞')
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const checkInterval = setInterval(() => {
        if (!isPlaying.value) {
          clearInterval(checkInterval)
          return
        }
        checkAndRestorePlayback()
      }, 5000) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error)
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –±—Ä–∞—É–∑–µ—Ä–∞, –∂–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
      if (error instanceof Error && error.name === 'NotAllowedError') {
        console.log('üö´ –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –∂–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        isWaitingForInteraction.value = true
        isPlaying.value = false
        isInitialized.value = false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
      } else {
        isPlaying.value = false
        isInitialized.value = false
      }
    }
  }

  // –ü–∞—É–∑–∞
  const pause = async (): Promise<void> => {
    if (!isPlaying.value) return

    await fadeOut(1000)
    audio.pause()
    isPlaying.value = false
    globalIsPlaying = false
    console.log('‚è∏Ô∏è –ú—É–∑—ã–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞
  const stop = (): void => {
    if (fadeInterval) {
      clearInterval(fadeInterval)
      fadeInterval = null
    }
    
    audio.pause()
    audio.currentTime = 0
    isPlaying.value = false
    globalIsPlaying = false
    console.log('‚èπÔ∏è –ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏
  const updateVolume = async (newVolume: number): Promise<void> => {
    volume.value = Math.max(0, Math.min(1, newVolume))
    const finalVolume = volume.value * musicVolume.value
    
    console.log(`üîä –û–±—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å: ${Math.round(volume.value * 100)}% ‚Üí –§–∏–Ω–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å: ${Math.round(finalVolume * 100)}%`)
    console.log(`üéµ –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á—ë—Ç–∞: volume=${volume.value}, musicVolume=${musicVolume.value}, final=${finalVolume}`)
    console.log(`üéµ –ê—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç: paused=${audio.paused}, ended=${audio.ended}, readyState=${audio.readyState}`)
    
    // –ï—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
    if (audio.readyState === 0 || !audio.src) {
      console.log('üîä –ê—É–¥–∏–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...')
      if (currentTrack.value) {
        await loadTrack(currentTrackIndex.value)
      } else {
        await loadTrack(0)
      }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
    audio.volume = finalVolume
    
    // –ï—Å–ª–∏ –º—É–∑—ã–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–≥—Ä–∞—Ç—å, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    if (isPlaying.value) {
      if (audio.paused) {
        console.log('üîä –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...')
        try {
          await audio.play()
          console.log('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ')
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –ø–æ—Å–ª–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          audio.volume = finalVolume
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error)
        }
      } else {
        // –ï—Å–ª–∏ –º—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
        console.log('üîä –ú—É–∑—ã–∫–∞ –∏–≥—Ä–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å...')
        audio.volume = finalVolume
      }
    }
    
    console.log(`üéµ –¢–µ–∫—É—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å –∞—É–¥–∏–æ: ${Math.round(audio.volume * 100)}%`)
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä–æ–º–∫–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–∏–ª–∞—Å—å
    setTimeout(() => {
      console.log(`üîä –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ 100–º—Å: ${Math.round(audio.volume * 100)}%`)
    }, 100)
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –º—É–∑—ã–∫–∏
  const updateMusicVolume = async (newVolume: number): Promise<void> => {
    musicVolume.value = Math.max(0, Math.min(1, newVolume))
    const finalVolume = volume.value * musicVolume.value
    
    console.log(`üéµ –ì—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏: ${Math.round(musicVolume.value * 100)}% ‚Üí –§–∏–Ω–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å: ${Math.round(finalVolume * 100)}%`)
    console.log(`üéµ –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á—ë—Ç–∞: volume=${volume.value}, musicVolume=${musicVolume.value}, final=${finalVolume}`)
    console.log(`üéµ –ê—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç: paused=${audio.paused}, ended=${audio.ended}, readyState=${audio.readyState}`)
    
    // –ï—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
    if (audio.readyState === 0 || !audio.src) {
      console.log('üéµ –ê—É–¥–∏–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...')
      if (currentTrack.value) {
        await loadTrack(currentTrackIndex.value)
      } else {
        await loadTrack(0)
      }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
    audio.volume = finalVolume
    
    // –ï—Å–ª–∏ –º—É–∑—ã–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–≥—Ä–∞—Ç—å, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    if (isPlaying.value) {
      if (audio.paused) {
        console.log('üéµ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...')
        try {
          await audio.play()
          console.log('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ')
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –ø–æ—Å–ª–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          audio.volume = finalVolume
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error)
        }
      } else {
        // –ï—Å–ª–∏ –º—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
        console.log('üéµ –ú—É–∑—ã–∫–∞ –∏–≥—Ä–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å...')
        audio.volume = finalVolume
      }
    }
    
    console.log(`üéµ –¢–µ–∫—É—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å –∞—É–¥–∏–æ: ${Math.round(audio.volume * 100)}%`)
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä–æ–º–∫–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–∏–ª–∞—Å—å
    setTimeout(() => {
      console.log(`üéµ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ 100–º—Å: ${Math.round(audio.volume * 100)}%`)
    }, 100)
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
  const updateEnvironmentVolume = (newVolume: number): void => {
    environmentVolume.value = Math.max(0, Math.min(1, newVolume))
    console.log(`üåç –ì—Ä–æ–º–∫–æ—Å—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${Math.round(environmentVolume.value * 100)}%`)
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  const forceUpdateVolume = async (): Promise<void> => {
    const finalVolume = volume.value * musicVolume.value
    
    console.log(`üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: ${Math.round(finalVolume * 100)}%`)
    console.log(`üîß –ê—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${audio !== null}`)
    console.log(`üîß –ê—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç –≥–æ—Ç–æ–≤: ${audio.readyState}`)
    console.log(`üîß –¢–µ–∫—É—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å: ${audio.volume}`)
    console.log(`üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ: paused=${audio.paused}, ended=${audio.ended}, currentTime=${audio.currentTime}`)
    console.log(`üîß –ò—Å—Ç–æ—á–Ω–∏–∫ –∞—É–¥–∏–æ: ${audio.src}`)
    
    // –ï—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
    if (audio.readyState === 0 || !audio.src) {
      console.log('üîß –ê—É–¥–∏–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...')
      if (currentTrack.value) {
        await loadTrack(currentTrackIndex.value)
      } else {
        await loadTrack(0)
      }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
    audio.volume = finalVolume
    
    // –ï—Å–ª–∏ –º—É–∑—ã–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–≥—Ä–∞—Ç—å, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    if (isPlaying.value) {
      if (audio.paused) {
        console.log('üîß –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...')
        try {
          await audio.play()
          console.log('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ')
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –ø–æ—Å–ª–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          audio.volume = finalVolume
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error)
        }
      } else {
        // –ï—Å–ª–∏ –º—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
        console.log('üîß –ú—É–∑—ã–∫–∞ –∏–≥—Ä–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å...')
        audio.volume = finalVolume
      }
    }
    
    console.log(`üîß –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${Math.round(audio.volume * 100)}%`)
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É–¥–∏–æ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  const checkAudioState = (): void => {
    console.log('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞:')
    console.log(`  - –ì—Ä–æ–º–∫–æ—Å—Ç—å: ${audio.volume} (${Math.round(audio.volume * 100)}%)`)
    console.log(`  - –ü–∞—É–∑–∞: ${audio.paused}`)
    console.log(`  - –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${audio.ended}`)
    console.log(`  - –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${audio.readyState}`)
    console.log(`  - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${audio.currentTime}`)
    console.log(`  - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${audio.duration}`)
    console.log(`  - –ò—Å—Ç–æ—á–Ω–∏–∫: ${audio.src}`)
    console.log(`  - –û—à–∏–±–∫–∞: ${audio.error ? audio.error.message : '–ù–µ—Ç'}`)
    console.log(`  - –ù–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: volume=${volume.value}, musicVolume=${musicVolume.value}`)
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º—É–∑—ã–∫–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  const forceRestartMusic = async (): Promise<void> => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º—É–∑—ã–∫–∏...')
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    stop()
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await new Promise(resolve => setTimeout(resolve, 100))
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫
    if (currentTrack.value) {
      await loadTrack(currentTrackIndex.value)
    } else {
      await loadTrack(0)
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
    const finalVolume = volume.value * musicVolume.value
    audio.volume = finalVolume
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    isPlaying.value = true
    globalIsPlaying = true
    try {
      await audio.play()
      console.log('‚úÖ –ú—É–∑—ã–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
      setTimeout(() => {
        audio.volume = finalVolume
        console.log(`üîÑ –ì—Ä–æ–º–∫–æ—Å—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: ${Math.round(audio.volume * 100)}%`)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        console.log(`üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: paused=${audio.paused}, volume=${audio.volume}`)
      }, 100)
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –º—É–∑—ã–∫–∏:', error)
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
  const addTrack = (track: Omit<MusicTrack, 'duration'>): void => {
    tracks.value.push({
      ...track,
      duration: 0
    })
    console.log('üéµ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–∫:', track.name)
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
  const removeTrack = (trackId: string): void => {
    const index = tracks.value.findIndex(track => track.id === trackId)
    if (index !== -1) {
      tracks.value.splice(index, 1)
      if (currentTrackIndex.value >= tracks.value.length) {
        currentTrackIndex.value = 0
      }
      console.log('üóëÔ∏è –¢—Ä–µ–∫ —É–¥–∞–ª–µ–Ω:', trackId)
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const cleanup = (): void => {
    stop()
    if (fadeTimeout) {
      clearTimeout(fadeTimeout)
    }
    audio.removeEventListener('ended', nextTrack)
    audio.removeEventListener('loadedmetadata', () => {})
  }

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isPlaying,
    currentTrackIndex,
    currentTrack,
    volume,
    musicVolume,
    environmentVolume,
    tracks,
    isWaitingForInteraction,
    hasUserInteracted,
    isInitialized,
    
    // –ú–µ—Ç–æ–¥—ã
    play,
    pause,
    stop,
    nextTrack,
    previousTrack,
    loadTrack,
    checkAndRestorePlayback,
    initializeAfterInteraction,
    loadSettings,
    updateVolume,
    updateMusicVolume,
    updateEnvironmentVolume,
    forceUpdateVolume,
    checkAudioState,
    forceRestartMusic,
    addTrack,
    removeTrack,
    cleanup
  }
}
